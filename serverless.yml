# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: office-maker

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  timeout: 20

  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1

  # you can add environment variables
  environment:
    TABLE_PREFIX: ${self:custom.TABLE_PREFIX}
    lambdaRole:
      Fn::GetAtt: [IamRoleLambdaExecution, Arn]
    accountServiceStorage: ${self:custom.config.accountServiceStorage_${self:provider.stage}}
  stackTags:
    Name: ${self:service}-${self:provider.stage}

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:*'
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - ${self:provider.region}
              - Ref: 'AWS::AccountId'
              - 'table/${self:custom.TABLE_PREFIX}*'
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::${self:custom.STORAGE_NAME}'
        - 'arn:aws:s3:::${self:custom.STORAGE_NAME}/*'

    # These are for rotateAppSyncKey
    - Effect: Allow
      Action: appsync:*
      Resource: '*'

# you can add packaging information here
package:
  exclude:
    - ./**
  include:
    - common/**
    - functions/**
    - config.yml

plugins:
  - serverless-plugin-stage-variables
  - serverless-s3-local
  - serverless-s3-remover
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-apigw-binary
  - serverless-aws-documentation
  - serverless-appsync-plugin

custom:
  config: ${file(config.yml)}
  TABLE_PREFIX: ${self:service}-map-${self:provider.stage}
  STORAGE_NAME: ${self:service}-storage-${self:provider.stage}
  stageVariables:
    ProfileServiceRoot: ${self:custom.config.ProfileServiceRoot_${self:provider.stage}}

  apigwBinary:
    types: #list of mime-types
      - 'image/png'
      - 'image/jpeg'
      - 'application/octet-stream'
  documentation:
    models:
      - name: 'Color'
        description: 'Model for get colors'
        contentType: 'application/json'
        schema: ${file(models/Color.yml)}
      - name: 'FloorFloorId'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/FloorFloorId.yml)}
      - name: 'Floors'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Floors.yml)}
      - name: 'Object'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Object.yml)}
      - name: 'Objects'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Objects.yml)}
      - name: 'People'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/People.yml)}
      - name: 'Person'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Person.yml)}
      - name: 'Prototype'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Prototype.yml)}
      - name: 'Prototypes'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Prototypes.yml)}
      - name: 'SearchPeopleWithObjects'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/SearchPeopleWithObjects.yml)}
      - name: 'Self'
        description: ''
        contentType: 'application/json'
        schema: ${file(models/Self.yml)}

  remover:
    buckets:
      #  - ${self:custom.STORAGE_NAME}
      - ${self:service}-storage-${self:provider.stage}
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false
    # seed:
    #   development:
    #     sources:
    #       - table: ${self:custom.TABLE_PREFIX}_colors
    #         sources: [./migrations/ColorsTable.json]
    #       - table: ${self:custom.TABLE_PREFIX}_prototypes
    #         sources: [./migrations/PrototypesTable.json]
    #       - table: ${self:custom.TABLE_PREFIX}_public_floors
    #         sources: [./migrations/PublicFloorsTable.json]
    #       - table: ${self:custom.TABLE_PREFIX}_edit_floors
    #         sources: [./migrations/EditFloorsTable.json]
    #       - table: ${self:custom.TABLE_PREFIX}_public_objects
    #         sources: [./migrations/PublicObjectsTable.json]
    #       - table: ${self:custom.TABLE_PREFIX}_edit_objects
    #         sources: [./migrations/EditObjectsTable.json]
  capacities:
    - table: PublicObjectsTable # DynamoDB Resource
      read:
        minimum: 1 # Minimum write capacity
        maximum: 50 # Maximum write capacity
        usage: 0.8 # Targeted usage percentage
  s3:
    host: 0.0.0.0
    port: 8888
    directory: /tmp
    cors: false
    # Uncomment only if you already have a S3 server running locally
    # noStart: true

  path:
    authorizer:
      test: test/fake_authorizer.handler

  appSync:
    name: ${self:service}-${self:provider.stage}-edit-sync
    authenticationType: API_KEY
    mappingTemplatesLocation: './vtl'
    mappingTemplates:
      - dataSource: EditObjects
        type: Query
        field: listEditObjectsOnFloor
        request: ContextRequest.vtl
        response: PrevResult.vtl
        kind: PIPELINE
        functions:
          - authorizer
          - listEditObjectsOnFloor
      - dataSource: EditObjects
        type: Mutation
        field: patchObjects
        request: ContextRequest.vtl
        response: PrevResult.vtl
        kind: PIPELINE
        functions:
          - authorizer
          - patchObjects
    schema: schema.graphql
    functionConfigurations:
      - dataSource: authorizer
        name: authorizer
        request: AuthorizerRequest.vtl
        response: AuthorizerResponse.vtl
      - dataSource: EditObjects
        name: listEditObjectsOnFloor
        request: ListEditObjectsOnFloor.vtl
        response: JsonListResponse.vtl
      - dataSource: patchObjects
        name: patchObjects
        request: AuthorizerRequest.vtl
        response: AuthorizerResponse.vtl
    dataSources:
      - type: AWS_LAMBDA
        name: authorizer
        config:
          functionName: appsyncAuthorizer
          iamRoleStatements:
            - Effect: Allow
              Action:
                - 'lambda:invokeFunction'
              Resource: '*'
      - type: AWS_LAMBDA
        name: patchObjects
        config:
          functionName: appsyncPatchObjects
          iamRoleStatements:
            - Effect: Allow
              Action:
                - 'lambda:invokeFunction'
              Resource: '*'
      - type: AMAZON_DYNAMODB
        name: EditObjects
        config:
          tableName: 
            Ref: EditObjectsTable
        iamRoleStatements:
          - Effect: Allow
            Action: 'dynamodb:*'
            Resource: '*'

functions:
  appsyncAuthorizer:
    handler: functions/appsyncAuthorizer/index.handler
    name: ${self:service}-${self:provider.stage}-appsync-authorizer
    environment:
      publicKey: ${ssm:office-maker-api-authorizer-pubkey~true}
      tenantId: ${self:custom.config.tenantId}
  appsyncPatchObjects:
    handler: functions/appsyncPatchObjects/index.handler
    name: ${self:service}-${self:provider.stage}-appsync-patchObjects
    memorySize: 512

  authorizer:
    handler: ${self:custom.path.authorizer.${self:provider.stage}, 'functions/authorizer/index.handler'}
    name: ${self:service}-${self:provider.stage}-authorizer
    package:
      include:
        - functions/authorizer/**
        - config.yml
    environment:
      publicKey: ${ssm:office-maker-api-authorizer-pubkey~true}
      tenantId: ${self:custom.config.tenantId}
    #   GUEST_TOKEN: ${self:custom.config.GUEST_TOKEN}

  batchAddCompressedObj:
    handler: functions/batchAddCompressedObj/index.handler
    name: ${self:service}-${self:provider.stage}-batchAddCompressedObj
    environment:
      STORAGE_NAME: ${self:custom.STORAGE_NAME}
    memorySize: 1024
    timeout: 300
    package:
      include:
        - functions/batchAddCompressedObj/**
        - common/**
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - PublicFloorsTable
              - StreamArn
          batchSize: 1
          startingPosition: TRIM_HORIZON
          enabled: true

  batchDeleteUnusedData:
    handler: functions/batchDeleteUnusedData/index.handler
    name: ${self:service}-${self:provider.stage}-batchDeleteUnusedData
    memorySize: 1024
    timeout: 300
    package:
      include:
        - functions/batchDeleteUnusedData/**
        - common/**
    events:
      - schedule:
          name: ${self:service}-${self:provider.stage}-batchDeleteUnusedData-schedule
          rate: cron(0 22 ? * 5 *)
          enabled: true
          input:
            key: value
  batchDeleteUnusedImages:
    handler: functions/batchDeleteUnusedImages/index.handler
    name: ${self:service}-${self:provider.stage}-batchDeleteUnusedImages
    environment:
      STORAGE_NAME: ${self:custom.STORAGE_NAME}
    package:
      include:
        - functions/batchDeleteUnusedImages/**
        - common/**
    events:
      - schedule:
          name: ${self:service}-${self:provider.stage}-batchDeleteUnusedImages-schedule
          rate: cron(0 22 ? * 5 *)
          enabled: true
          input:
            key: value

  deleteFloorsFloorIdEdit:
    handler: functions/deleteFloorsFloorIdEdit/index.handler
    name: ${self:service}-${self:provider.stage}-deleteFloorsFloorIdEdit
    package:
      include:
        - functions/deleteFloorsFloorIdEdit/**
        - common/**
    events:
      - http:
          path: /floors/{floorId}/edit
          method: delete
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                floorId: true

  getColors:
    handler: functions/getColors/index.handler
    name: ${self:service}-${self:provider.stage}-getColors
    package:
      include:
        - functions/getColors/**
        - common/**
    events:
      - http:
          path: /colors
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
          documentation:
            summary: 'Get Colors'
            description: 'Get Colors'
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': 'Color'

  getFloors:
    handler: functions/getFloors/index.handler
    name: ${self:service}-${self:provider.stage}-getFloors
    package:
      include:
        - functions/getFloors/**
        - common/**
    events:
      - http:
          path: /floors
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
          documentation:
            summary: 'Get Floor'
            description: 'Get Floor'
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': 'Floors'
  getFloorsFloorIdEdit:
    handler: functions/getFloorsFloorIdEdit/index.handler
    name: ${self:service}-${self:provider.stage}-getFloorsFloorIdEdit
    memorySize: 1024
    package:
      include:
        - functions/getFloorsFloorIdEdit/**
        - common/**
    events:
      - http:
          path: /floors/{floorId}/edit
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                floorId: true
  getObjectsObjectId:
    handler: functions/getObjectsObjectId/index.handler
    name: ${self:service}-${self:provider.stage}-getObjectsObjectId
    package:
      include:
        - functions/getObjectsObjectId/**
        - common/**
    events:
      - http:
          path: /objects/{objectId}
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                objectId: true
  getPeople:
    handler: functions/getPeople/index.handler
    name: ${self:service}-${self:provider.stage}-getPeople
    package:
      include:
        - functions/getPeople/**
        - common/**
    events:
      - http:
          path: /people
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              querystrings:
                post: true
                ids: true
                floorId: true
          documentation:
            summary: 'Get People'
            description: 'Get People'
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': 'People'
  getPrototypes:
    handler: functions/getPrototypes/index.handler
    name: ${self:service}-${self:provider.stage}-getPrototypes
    package:
      include:
        - functions/getPrototypes/**
        - common/**
    events:
      - http:
          path: /prototypes
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
  getSearchObjectsQuery:
    handler: functions/getSearchObjectsQuery/index.handler
    name: ${self:service}-${self:provider.stage}-getSearchObjectsQuery
    package:
      include:
        - functions/getSearchObjectsQuery/**
        - common/**
    events:
      - http:
          path: /search/Objects/{query}
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              querystrings:
                all: true
              paths:
                query: true
  getSearchQuery:
    handler: functions/getSearchQuery/index.handler
    name: ${self:service}-${self:provider.stage}-getSearchQuery
    package:
      include:
        - functions/getSearchQuery/**
        - common/**
    events:
      - http:
          path: /search/{query}
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              querystrings:
                all: true
              paths:
                query: true
  getSelf:
    handler: functions/getSelf/index.handler
    name: ${self:service}-${self:provider.stage}-getSelf
    package:
      include:
        - functions/getSelf/**
        - common/**
    events:
      - http:
          path: /self
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
  patchObjects:
    handler: functions/patchObjects/index.handler
    name: ${self:service}-${self:provider.stage}-patchObjects
    package:
      include:
        - functions/patchObjects/**
  patchObjects2:
    handler: functions/patchObjects2/index.handler
    name: ${self:service}-${self:provider.stage}-patchObjects2
    memorySize: 1024
    package:
      include:
        - functions/patchObjects2/**
        - common/**
    events:
      - http:
          path: /objects
          method: patch
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
  putColors:
    handler: functions/putColors/index.handler
    name: ${self:service}-${self:provider.stage}-putColors
    package:
      include:
        - functions/putColors/**
        - common/**
    events:
      - http:
          path: /colors
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
  putColorById:
    handler: functions/putColorById/index.handler
    name: ${self:service}-${self:provider.stage}-putColorById
    package:
      include:
        - functions/putColorById/**
        - common/**
    events:
      - http:
          path: /colors/{id}
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                id: true
  putFloorsFloorIdEdit:
    handler: functions/putFloorsFloorIdEdit/index.handler
    name: ${self:service}-${self:provider.stage}-putFloorsFloorIdEdit
    package:
      include:
        - functions/putFloorsFloorIdEdit/**
        - common/**
    events:
      - http:
          path: /floors/{floorId}/edit
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                floorId: true
  putFloorsFloorIdPublic:
    handler: functions/putFloorsFloorIdPublic/index.handler
    name: ${self:service}-${self:provider.stage}-putFloorsFloorIdPublic
    memorySize: 1024
    package:
      include:
        - functions/putFloorsFloorIdPublic/**
        - common/**
    events:
      - http:
          path: /floors/{floorId}/public
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                floorId: true
  putImagesImageId:
    handler: functions/putImagesImageId/index.handler
    name: ${self:service}-${self:provider.stage}-putImagesImageId
    environment:
      STORAGE_NAME: ${self:custom.STORAGE_NAME}
    memorySize: 1024
    package:
      include:
        - functions/putImagesImageId/**
        - common/**
    events:
      - http:
          path: /images/{imageId}
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
  putPrototypes:
    handler: functions/putPrototypes/index.handler
    name: ${self:service}-${self:provider.stage}-putPrototypes
    package:
      include:
        - functions/putPrototypes/**
        - common/**
    events:
      - http:
          path: /prototypes
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
  putPrototypesPrototypeId:
    handler: functions/putPrototypesPrototypeId/index.handler
    name: ${self:service}-${self:provider.stage}-putPrototypesPrototypeId
    package:
      include:
        - functions/putPrototypesPrototypeId/**
        - common/**
    events:
      - http:
          path: /prototypes/{prototypeId}
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                prototypeId: true

  rotateAppSyncKey:
    handler: functions/rotateAppSyncKey/index.handler
    name: ${self:service}-${self:provider.stage}-rotate-appsync-key
    environment:
      expirationDays: 7
      appsyncApiName: ${self:custom.appSync.name}
      bucketName: ${self:custom.STORAGE_NAME}
      objectPath: appsync/${self:provider.stage}.json
    events:
      - schedule: rate(3 days)

# you can add CloudFormation resource templates here
resources:
  Resources:
    # APIG
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-api-${self:provider.stage}
    # DynamoDB
    ColorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_PREFIX}_colors
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    PrototypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_PREFIX}_prototypes
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    PublicFloorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_PREFIX}_public_floors
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    EditFloorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_PREFIX}_edit_floors
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    PublicObjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_PREFIX}_public_objects
        AttributeDefinitions:
          - AttributeName: floorId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: personId
            AttributeType: S
        KeySchema:
          - AttributeName: floorId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: id-index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: personId-index
            KeySchema:
              - AttributeName: personId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    EditObjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TABLE_PREFIX}_edit_objects
        AttributeDefinitions:
          - AttributeName: floorId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: personId
            AttributeType: S
        KeySchema:
          - AttributeName: floorId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: id-index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: personId-index
            KeySchema:
              - AttributeName: personId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    # S3
    StorageBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.STORAGE_NAME}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: deleteEverythingInOneWeek
              Prefix: ''
              Status: Enabled
              NoncurrentVersionExpirationInDays: '7'
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
              Id: ${self:service}-storage-cors
              MaxAge: '1'

    StorageBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: StorageBucket
        PolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal: '*'
              Action: 's3:ListBucket'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: StorageBucket
              Condition:
                Bool:
                  'aws:SecureTransport': 'true'
                IpAddress: ${self:custom.config.sourceIp}
            - Effect: Allow
              Principal: '*'
              Action: 's3:*'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: StorageBucket
                    - /*
              Condition:
                Bool:
                  'aws:SecureTransport': 'true'
                IpAddress: ${self:custom.config.sourceIp}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
